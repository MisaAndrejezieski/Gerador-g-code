"""
Gerando.py
Versão profissional: GUI + simulação 2D/3D + geração de G-code (.gcode e .nc)
- Mantém orientação original da imagem
- Z negativo = corta para baixo
- Simulação 2D (imshow) + 3D (matplotlib interactive window)
- Salva arquivos em ./Imagens
"""

import os
import threading
import numpy as np
from PIL import Image, ImageOps
import matplotlib
matplotlib.use("TkAgg")  # backend Tk for interactive windows
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D  # noqa: F401
from tkinter import (
    Tk, filedialog, messagebox, Label, Button, Entry, StringVar, Frame, LEFT, RIGHT
)
from tkinter.ttk import Progressbar

# -------------------------
# Configs / Paths
# -------------------------
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
IMAGES_DIR = os.path.join(BASE_DIR, "Imagens")
os.makedirs(IMAGES_DIR, exist_ok=True)

GCODE_FILE = os.path.join(IMAGES_DIR, "relevo.gcode")
NC_FILE = os.path.join(IMAGES_DIR, "relevo_3d.nc")
HEIGHTMAP_PNG = os.path.join(IMAGES_DIR, "heightmap.png")
PREVIEW2D_PNG = os.path.join(IMAGES_DIR, "preview_2d.png")
PREVIEW3D_PNG = os.path.join(IMAGES_DIR, "preview_3d.png")

# Default safety params
DEFAULT_FEED = 800          # mm/min
SAFE_Z = 5.0                # mm (travel height)
DEFAULT_MAX_PIXELS = (1200, 1200)  # limit for processing to avoid lockups

# -------------------------
# Image -> Heightmap
# -------------------------
def load_and_prepare_image(path, max_pixels=DEFAULT_MAX_PIXELS, invert=True):
    """Load image, keep orientation, downscale if huge, convert to grayscale and optionally invert.
       Returns PIL image (L)."""
    img = Image.open(path).convert("L")
    # if very large, downscale to max_pixels preserving aspect
    if img.size[0] > max_pixels[0] or img.size[1] > max_pixels[1]:
        img.thumbnail(max_pixels, Image.Resampling.LANCZOS)
    if invert:
        img = ImageOps.invert(img)
    return img

def image_to_heightmap_array(img_pil, profundidade_mm):
    """Convert PIL L image to numpy float32 array with values in mm (0..profundidade_mm)."""
    arr = np.asarray(img_pil, dtype=np.float32)
    # normalize 0..1 from 0..255
    if arr.max() - arr.min() > 0:
        norm = (arr - arr.min()) / (arr.max() - arr.min())
    else:
        norm = arr / 255.0
    depth = norm * float(profundidade_mm)  # mm
    return depth  # 2D float array

# -------------------------
# Simulation: 2D + 3D
# -------------------------
def show_preview_2d(depth_array, save_path=None):
    """Shows a 2D depth map (imshow). Optionally saves PNG."""
    plt.figure(figsize=(8, 6))
    plt.imshow(depth_array, cmap="gray", origin="upper")
    plt.title("Mapa de Profundidade (mm)")
    plt.colorbar(label="mm")
    if save_path:
        plt.savefig(save_path, dpi=200, bbox_inches="tight")
    plt.show()

def show_preview_3d(depth_array, save_path=None):
    """Shows an interactive 3D surface (matplotlib). Optionally saves static PNG."""
    fig = plt.figure(figsize=(10, 8))
    ax = fig.add_subplot(111, projection="3d")
    h, w = depth_array.shape
    xs = np.linspace(0, w - 1, w)
    ys = np.linspace(0, h - 1, h)
    X, Y = np.meshgrid(xs, ys)
    surf = ax.plot_surface(X, Y, depth_array, cmap="gray", linewidth=0, antialiased=True)
    ax.set_title("Relevo 3D (visualização)")
    ax.set_xlabel("pixel X")
    ax.set_ylabel("pixel Y")
    ax.set_zlabel("Profundidade (mm)")
    fig.colorbar(surf, ax=ax, shrink=0.6, label="mm")
    if save_path:
        plt.savefig(save_path, dpi=200, bbox_inches="tight")
    plt.show()

# -------------------------
# G-code generation
# -------------------------
def generate_gcode(depth_array, largura_mm, altura_mm, feed_rate=DEFAULT_FEED, safe_z=SAFE_Z, out_gcode=GCODE_FILE, out_nc=NC_FILE):
    """Generates a bidirectional zig-zag G-code. Z is negative for cutting."""
    h, w = depth_array.shape
    step_x = float(largura_mm) / float(w)
    step_y = float(altura_mm) / float(h)

    # Write gcode
    with open(out_gcode, "w", encoding="utf-8") as f:
        f.write("(Generated by Gerando.py)\n")
        f.write("G21 ; mm\n")
        f.write("G90 ; absolute\n")
        f.write(f"G0 Z{safe_z:.3f}\n")
        f.write(f"G1 F{feed_rate}\n")
        for j in range(h):
            # zig-zag path
            if j % 2 == 0:
                x_iter = range(0, w)
            else:
                x_iter = range(w - 1, -1, -1)
            y_mm = j * step_y
            for i in x_iter:
                x_mm = i * step_x
                z_mm = -float(depth_array[j, i])  # negative = cut down
                f.write(f"G1 X{x_mm:.3f} Y{y_mm:.3f} Z{z_mm:.3f}\n")
            # lift to safe Z between lines
            f.write(f"G0 Z{safe_z:.3f}\n")
        f.write("G0 Z10.000\nM30\n")
    # create NC copy
    with open(out_gcode, "r", encoding="utf-8") as src, open(out_nc, "w", encoding="utf-8") as dst:
        dst.write(src.read())
    return out_gcode, out_nc

# -------------------------
# Worker that runs processing
# -------------------------
def worker_process(image_path, largura_mm, altura_mm, profundidade_mm, do_preview2d, do_preview3d, progress_callback=None):
    try:
        if progress_callback:
            progress_callback(5, "Carregando imagem...")
        img = load_and_prepare_image(image_path)
        if progress_callback:
            progress_callback(20, "Convertendo em heightmap...")
        depth = image_to_heightmap_array(img, profundidade_mm)
        # save heightmap visual
        Image.fromarray(np.uint8(np.clip(depth / profundidade_mm * 255.0, 0, 255))).save(HEIGHTMAP_PNG)
        if progress_callback:
            progress_callback(40, f"Heightmap salvo: {HEIGHTMAP_PNG}")

        # previews (optional)
        if do_preview2d:
            if progress_callback:
                progress_callback(55, "Gerando preview 2D...")
            show_preview_2d(depth, save_path=PREVIEW2D_PNG)
        if do_preview3d:
            if progress_callback:
                progress_callback(70, "Gerando preview 3D...")
            show_preview_3d(depth, save_path=PREVIEW3D_PNG)

        if progress_callback:
            progress_callback(80, "Gerando G-code...")
        gcode, nc = generate_gcode(depth, largura_mm, altura_mm, feed_rate=DEFAULT_FEED, safe_z=SAFE_Z)
        if progress_callback:
            progress_callback(100, f"G-code salvo: {gcode}\nNC salvo: {nc}")

        return True, None
    except Exception as ex:
        return False, str(ex)

# -------------------------
# Tkinter GUI
# -------------------------
class GeradorApp:
    def __init__(self, master):
        self.master = master
        master.title("Gerador de Relevo 3D - Simulação e G-code")
        master.geometry("560x360")

        self.image_path = None
        self.largura_var = StringVar(value="2000")
        self.altura_var = StringVar(value="3000")
        self.profundidade_var = StringVar(value="30")
        self.preview2d_var = StringVar(value="1")
        self.preview3d_var = StringVar(value="0")

        Label(master, text="Gerador de Relevo 3D - Segurança: simule antes de cortar", font=("Arial", 11, "bold")).pack(pady=8)

        btn_frame = Frame(master)
        btn_frame.pack(pady=6)
        Button(btn_frame, text="Selecionar Imagem", width=18, command=self.select_image).pack(side=LEFT, padx=6)
        Button(btn_frame, text="Simular (2D+3D)", width=18, command=self.start_simulation).pack(side=LEFT, padx=6)
        Button(btn_frame, text="Gerar G-code", width=18, command=self.start_generation).pack(side=LEFT, padx=6)

        params = Frame(master)
        params.pack(pady=8)
        Label(params, text="Largura (mm):").grid(row=0, column=0, sticky="e")
        Entry(params, textvariable=self.largura_var, width=10).grid(row=0, column=1, padx=6)
        Label(params, text="Altura (mm):").grid(row=1, column=0, sticky="e")
        Entry(params, textvariable=self.altura_var, width=10).grid(row=1, column=1, padx=6)
        Label(params, text="Profundidade (mm):").grid(row=2, column=0, sticky="e")
        Entry(params, textvariable=self.profundidade_var, width=10).grid(row=2, column=1, padx=6)

        # toggles for previews
        Label(params, text="Gerar preview 2D? (abre janela)").grid(row=3, column=0, sticky="e")
        Entry(params, textvariable=self.preview2d_var, width=3).grid(row=3, column=1, sticky="w")
        Label(params, text="Gerar preview 3D? (abre janela)").grid(row=4, column=0, sticky="e")
        Entry(params, textvariable=self.preview3d_var, width=3).grid(row=4, column=1, sticky="w")

        self.status_label = Label(master, text="Pronto", fg="green")
        self.status_label.pack(pady=6)

        self.progress = Progressbar(master, orient="horizontal", length=480, mode="determinate")
        self.progress.pack(pady=8)

        Label(master, text="Arquivos serão salvos em: ./Imagens").pack(pady=4)

    def select_image(self):
        path = filedialog.askopenfilename(title="Selecione a imagem", filetypes=[("Imagens", "*.png;*.jpg;*.jpeg;*.bmp;*.tif;*.tiff")])
        if path:
            self.image_path = path
            self.status_label.config(text=f"Selecionada: {os.path.basename(path)}", fg="blue")

    def progress_cb(self, val, msg=None):
        self.progress["value"] = val
        if msg:
            self.status_label.config(text=msg)

    def run_worker(self, simulate_only=False):
        if not self.image_path:
            messagebox.showwarning("Aviso", "Selecione uma imagem primeiro.")
            return

        largura = float(self.largura_var.get())
        altura = float(self.altura_var.get())
        profundidade = float(self.profundidade_var.get())
        do2d = bool(int(self.preview2d_var.get()))
        do3d = bool(int(self.preview3d_var.get()))
        # For simulate_only True, do not write final G-code? we will still generate files for inspection
        self.progress["value"] = 0
        self.status_label.config(text="Processando...", fg="orange")

        def runner():
            ok, err = worker_process(self.image_path, largura, altura, profundidade, do2d, do3d, progress_callback=self.progress_cb)
            if ok:
                self.status_label.config(text="Concluído: arquivos em ./Imagens", fg="green")
                messagebox.showinfo("Sucesso", "Concluído. Verifique a pasta ./Imagens e simule o G-code (CAMotics).")
            else:
                self.status_label.config(text=f"Erro: {err}", fg="red")
                messagebox.showerror("Erro", err)
            self.progress["value"] = 0

        threading.Thread(target=runner, daemon=True).start()

    def start_simulation(self):
        # runs with preview windows enabled regardless of preview vars
        # show both 2D and 3D so user can inspect
        self.preview2d_var.set("1")
        self.preview3d_var.set("1")
        self.run_worker(simulate_only=True)

    def start_generation(self):
        # only generate files (previews optional based on input)
        self.run_worker(simulate_only=False)


# -------------------------
# Entry point
# -------------------------
def main():
    root = Tk()
    app = GeradorApp(root)
    root.mainloop()

if __name__ == "__main__":
    main()
